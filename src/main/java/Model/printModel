package Model;

import Model.Question;

import java.util.HashSet;
import java.util.Set;
import java.util.Random;

public class Model {
    private Set<String> medicines = FileReaderCSV.readMedicineCollection().keySet();
    private Set<Question> questions = new HashSet<>();

    public Model() {
        init();
    }

    private void init() {
        for(int idx = 1; idx <= FileReaderCSV.readQuestions().size(); ++idx) {
            questions.add(new Question(idx));
        }
    }

    public void AskQuestions() {
        System.out.println("\n\n\n\n\n\n\n\n\n");
        while(!medicines.isEmpty() || !questions.isEmpty())
        {
//            System.out.println("\n\n\n");
//            System.out.println("Questions amount:" + questions.size());
////            questions.forEach(Question::print);
//            for(Question q : questions)
//            {
//                System.out.println(q.getIndex() + "    " + q.getQuestion() + "  "  + getScore(q));
//            }
//            System.out.println("\n\n\n");

            Question bestQuestion = getBestQuestion();
//            System.out.println(medicines.size());
//            System.out.println("Current set:" + medicines);
//            System.out.println("Question:" + bestQuestion.getQuestion());
            Random rd = new Random();
            Set<String> answer = null;
            if(rd.nextBoolean()) {
//                System.out.println("User said yes");
                answer = bestQuestion.getYes();
            } else {
//                System.out.println("User said no");
                answer = bestQuestion.getNo();
            }
            questions.remove(bestQuestion);
//            System.out.println("Removing:" + bestQuestion.getQuestion());

            medicines.removeAll(answer);

            for(Question q : questions) {
                q.getNo().removeAll(answer);
                q.getYes().removeAll(answer);
            }

//            System.out.println("Removing:");
//            System.out.println(answer);
            questions.removeIf(element -> getScore(element) == 0);
            if (medicines.size() == 1)
            {
                break;
            }
        }
        if (medicines.isEmpty())
        {
//            System.out.println("Go to Doctor");
        } else {
//            System.out.println(medicines);
        }
    }

    public Question getBestQuestion() {
        Question best = new Question(1);
        int best_score = getScore(best);

        for(Question q: questions)
        {
            int score = getScore(q);

            if(score > best_score) {
                best_score = score;
                best = q;
            } else if(score == best_score && best.getIndex() < q.getIndex()) {
                best = q;
            }
        }

        return best;
    }

    private int getScore(Question q) {
        Set<String> intersectionYes = new HashSet<String>(medicines);
        intersectionYes.retainAll(q.getYes());

        Set<String> intersectionNo = new HashSet<String>(medicines);
        intersectionNo.retainAll(q.getNo());

        //int score = intersectionNo.size() + intersectionYes.size();
        int score = intersectionYes.size() < intersectionNo.size() ? intersectionYes.size() : intersectionNo.size();

        if(score == 2*medicines.size() || score == 0) {
//            questions.remove(q);
            return 0;// -1
        }

        return score;
    }
}
